q1.Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true.

The array nums is strictly increasing if nums[i - 1] < nums[i] for each index (1 <= i < nums.length).
sol-
class Solution {
public:
    bool canBeIncreasing(vector<int>& nums) {
        int count=0;
        for(int i=1;i<nums.size();i++){
            if(nums[i]<=nums[i-1]){
                if(count==1)
                    return false;
                count++;
            }
            if(i>1&&nums[i]<=nums[i-2]){
                nums[i]=nums[i-1];
            }
            
        }
        return true;
          
    }
};

q2.Given an array of integers arr, return true if and only if it is a valid mountain array.

Recall that arr is a mountain array if and only if:
arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

sol-class Solution {
public:
    bool validMountainArray(vector<int>& arr) {
        int i=0;
        while(i<arr.size()-1&&arr[i]<arr[i+1]){
            i++;
        }
        if(i==0||i==arr.size()-1)
            return false;
        while(i<arr.size()-1&&arr[i]>arr[i+1]){
           i++;
        }
        if(i==arr.size()-1)
            return true;
        else
            return false;
    }
};
 
