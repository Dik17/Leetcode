q1.Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true.

The array nums is strictly increasing if nums[i - 1] < nums[i] for each index (1 <= i < nums.length).
sol-
class Solution {
public:
    bool canBeIncreasing(vector<int>& nums) {
        int count=0;
        for(int i=1;i<nums.size();i++){
            if(nums[i]<=nums[i-1]){
                if(count==1)
                    return false;
                count++;
            }
            if(i>1&&nums[i]<=nums[i-2]){
                nums[i]=nums[i-1];
            }
            
        }
        return true;
          
    }
};

q2.Given an array of integers arr, return true if and only if it is a valid mountain array.

Recall that arr is a mountain array if and only if:
arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

sol-class Solution {
public:
    bool validMountainArray(vector<int>& arr) {
        int i=0;
        while(i<arr.size()-1&&arr[i]<arr[i+1]){
            i++;
        }
        if(i==0||i==arr.size()-1)
            return false;
        while(i<arr.size()-1&&arr[i]>arr[i+1]){
           i++;
        }
        if(i==arr.size()-1)
            return true;
        else
            return false;
    }
};
 
 q3.Given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.

Formally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])

sol-class Solution {
public:
    bool canThreePartsEqualSum(vector<int>& arr) {
        int sum=0;
        for(int i=0;i<arr.size();i++){
            sum=sum+arr[i];
        }
        int count=0;
     if(sum%3!=0)
         return false;
        int temp=0;
        for(int i=0;i<arr.size();i++){
            temp=temp+arr[i];
            if(sum/3==temp){
                count++;
                temp=0;
            }
        }
        if(count>=3)
            return true;
        else
            return false;
    }
};

q4.The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

sol-
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int>mp;
        for(int i=0;i<nums.size();i++){
            mp[nums[i]]++;
        }
    int max=mp[nums[0]];
       int n=nums[0];
       
        for(int i=1;i<nums.size();i++){
            if(max<mp[nums[i]]){
                max=mp[nums[i]];
                n=nums[i];
            }
        }
    
            return n;
       
        
    }
};

q5.You are given a sorted unique integer array nums.

A range [a,b] is the set of all integers from a to b (inclusive).

Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.

Each range [a,b] in the list should be output as:

"a->b" if a != b
"a" if a == b

sol-

class Solution {
public:
    vector<string> summaryRanges(vector<int>& nums) {
        vector<string>ans;
        if(nums.size()==0){
            return ans;
        }
        if(nums.size()==1){
           ans.push_back(""+to_string(nums[0]));
            return ans;
        }
        int a=nums[0];
        int b=nums[0];
        for(int i=1;i<nums.size();i++){
            if(nums[i]==a+1){
           a=nums[i];
            if(a==nums[nums.size()-1]){
                  ans.push_back(""+to_string(b)+"->"+to_string(a));
            }
            }
            else{
          if(a!=b){
                ans.push_back(""+to_string(b)+"->"+to_string(a));}
             
                if(a==b){
                      ans.push_back(""+to_string(a));
                }
                  if(i==nums.size()-1&&a!=nums[i]){
                   ans.push_back(""+to_string(nums[i]));
                   
               }
                b=nums[i];
                
                a=nums[i];
               
            }
            
        }
        return ans;
    }
};

q6.Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.

A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

sol-
class Solution {
public:
    vector<int> buildArray(vector<int>& nums) {
        vector<int>ans;
        for(int i=0;i<nums.size();i++){
            ans.push_back(nums[nums[i]]);
}
        return ans;
    }
};

q7.Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).

Return the running sum of nums.

sol-
class Solution {
public:
    vector<int> runningSum(vector<int>& nums) {
        vector<int>ans;
        int sum=0;
        for(int i=0;i<nums.size();i++){
            sum=sum+nums[i];
            ans.push_back(sum);
            
        }
        return ans;
    }
};

